package ru.sbtqa.tutorials.xunit;

import org.hamcrest.Description;
import org.hamcrest.TypeSafeMatcher;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.math.BigDecimal;

import static java.math.BigDecimal.valueOf;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.*;
import static org.junit.jupiter.api.Assertions.*;
import static ru.sbtqa.tutorials.xunit.MyOwnMatcher.justDoIt;


/**
 * –í–≤–µ–¥–µ–Ω–∏–µ –≤ –ú–∞—Ç—á–µ—Ä—ã. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ Hamcrest
 */
class PaymentBankAccountTest {

    private PaymentBankAccount paymentBankAccount;

    @BeforeEach
    void setUp() {
        paymentBankAccount =
                new PaymentBankAccount("Artem", "Sokovets", valueOf(1230000000L));
    }

    @Test
    void shouldBeWithoutMatchersValidParamsOfPaymentBankAccount() {
        assertNotNull(paymentBankAccount, "Object is null");
        assertEquals("Artem", paymentBankAccount.getFirstName(), "–ò–º—è –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç");
        assertTrue("Sokovets".contains(paymentBankAccount.getLastName()), "–§–∞–º–∏–ª–∏—è –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç");
        assertTrue(valueOf(1230000000L).equals(paymentBankAccount.getBalance()), "–ë–∞–ª–∞–Ω—Å –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç");
    }

    @Test
    void shouldWithMatchersBeValidParamsOfPaymentBankAccount() {
        assertThat(paymentBankAccount,
                allOf(notNullValue(),
                        hasProperty("firstName", equalTo("Artem")),
                        hasProperty("lastName", equalTo("Sokovets")),
                        hasProperty("balance", greaterThanOrEqualTo(valueOf(1230000000L)))));
    }

    @Test
    void shouldBeWithMyMatcherValidParamsOfPaymentBankAccount() {
        assertThat(paymentBankAccount, justDoIt("Artem", "Sokovets", valueOf(1230000000L)));
    }


}

/**
 * –°–æ–∑–¥–∞–µ–º —Å–≤–æ–π –º–∞—Ç—á–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –Ω–∞—à–µ–π –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–µ (–ü—Ä–æ—Å—Ç–æ–π –ø—Ä–∏–º–µ—Ä üí°).
 * –ù–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞ TypeSafeMatcher, –¥–∞–µ—Ç —Å—Ä–∞–∑—É –ø—Ä–æ–≤–µ—Ä–∫—É –∑–Ω–∞—á–µ–Ω–∏–π –Ω–∞ null, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞ –∏ –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –Ω—É–∂–Ω–æ–º—É —Ç–∏–ø—É
 */
class MyOwnMatcher extends TypeSafeMatcher<PaymentBankAccount> {

    private final String firstName;
    private final String lastName;
    private final BigDecimal balance;

    private MyOwnMatcher(String firstName, String lastName, BigDecimal balance) {
        this.firstName = firstName;
        this.lastName = lastName;
        this.balance = balance;
    }


    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–º —Ç—Ä–µ–±—É—é—Ç—Å—è
     * @param item {@link PaymentBankAccount}
     * @return true/false
     */
    @Override
    protected boolean matchesSafely(PaymentBankAccount item) {
        return item.getFirstName().equals(firstName)
                && item.getBalance().equals(balance)
                && item.getLastName().equals(lastName);
    }

    /**
     * –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å
     * @param description {@link String}
     */
    @Override
    public void describeTo(Description description) {
        description.appendText("–û–±—ä–µ–∫—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è  = ")
                .appendValueList("[", ",", "]", firstName, lastName, balance);
    }

    /**
     * –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—á–µ, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å
     * @param item {@link String}
     * @param mismatchDescription {@link String}
     */
    @Override
    protected void describeMismatchSafely(PaymentBankAccount item, Description mismatchDescription) {
        mismatchDescription.appendText("–û–±—ä–µ–∫—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç ")
                .appendValueList("[", ",", "]", item.getFirstName(), item.getLastName(), item.getBalance());
    }

    /**
     * –ú–∞—Ç—á–µ—Ä –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –º—ã –±—É–¥–µ–º –≤—ã–∑—ã–≤–∞—Ç—å –≤ –º–µ—Ç–æ–¥–µ assertThat
     * @param firstName {@link String}
     * @param lastName {@link String}
     * @param balance {@link }
     * @return {@link MyOwnMatcher}
     */
    static MyOwnMatcher justDoIt(String firstName, String lastName, BigDecimal balance) {
        return new MyOwnMatcher(firstName, lastName, balance);
    }
}