Во второй части курса по Мокито я покажу как подключить этот фрэймворк к проекту.
Посмотрим разные варианты создания моков и напишем простые тесты к модулю клиентского заказа,
который мы рассматривали в предыдущей части.

<
Открываю заготовку maven проекта с клиентским заказом. Показываю, что там есть.
Далее добавляю тест к Order'у напрямую из среды.
Потом добавляю в pom.xml зависимости:
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-engine</artifactId>
            <version>5.1.0</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-core</artifactId>
            <version>${mockito.version}</version>
            <scope>test</scope>
        </dependency>

Возвращаюсь к OrderTest'у.
Делаю то, что написано в OrderTest_Mockito_mock_class_members.
Рассказываю, что
    JUnit создаёт для каждого тестового метода новый инстанс класса с тестами.
    Это не ошибка JUnit, а продуманное решение.
    Основная причина почему это так - необходимость изолированности тестов.
Потом говорю, что в принципе, можно переписать этот тест на использование аннотации BeforeEach.
Плавно переделываю в OrderTest_Mockito_mock_BeforeEach.
Говорю:
    Использовать или нет BeforeEach - решать вам. Если вам нужен отдельный метод для инициализации - делайте.
    Иначе, на мой взгляд, лучше использовать нестатические члены класса (в тестах важна изолированность и повторяемость).
Переделываю OrderTest в вариант с OrderTest_Mockito_initMocks - BeforeEach остался, но зато моки через аннотации.
Говорю, что в JUnit 5 есть такая прекрасная вещь как аннотация ExtendWith.
Добавляю зависимость
       <dependency>
            <!-- Добавление зависимости для использования MockitoExtension -->
            <groupId>org.mockito</groupId>
            <artifactId>mockito-junit-jupiter</artifactId>
            <version>${mockito.version}</version>
        </dependency>
Переписываю тест в вид OrderTest_Mockito_JUnitExtendWith
Подвожу итог:
    В итоге в данной части курса мы рассмотрели несколько вариантов подключения моков к тестам
    и можем в следующей части уже приступить к основным способностям Мокито.
>

